<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--

   namespace：名称空间
  -->
<mapper namespace="com.ht.mapper.BrandMapper">
    <!--数据库 字段名称 和实体类属性名称 不一样，不能自动封装数据
    * 起别名：对不一样的列名 起别名 让实体类与别名一样
        *缺点：每次查询都需要定义一次别名
            *sql片段： 不灵活
    *resultMqp:
        id:唯一标识
        type：实体类的路径
       1、定义标签
       2、使用resultMap 属性替换 resultType属性



    -->
 <!--   &lt;!&ndash;sql 片段 &ndash;&gt;
    <sql id="brand_column">
        id,brand_name as brandName, company_name as companyName, ordered, description, status
    </sql>
-->
    <resultMap id="brandResultMap" type="com.ht.pojo.Brand">
        <!--
          id:主键字段
            column:列名
            property：实体类名
          result：一般字段
             column:列名
             property：实体类名
          -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>



    <select id="selectAll" resultMap="brandResultMap">
        select 
        *
        from tb_brand;
    </select>
    <select id="selectByIdBrand" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
     </select>

  <!--  <![CDATA[  特特殊字符 用CDATA区
               <
        ]]> #{id}-->
            <!--
              #{id}:防止sql注入
              ${id}:一般用来表名不固定或者列名问题  存在sql注入

              特殊字符
              用CDATA区

              -->

 <!--   &lt;!&ndash;多条件查询  &ndash;&gt;
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}
    </select>-->
    <!--动态多条件查询  -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
       /* where 1 = 1*/
       <where>
           <if test="status != null">
               and  status = #{status}
           </if>
           <if test="companyName != null and companyName!= '' ">
               and company_name like #{companyName}
           </if>
           <if test="brandName != null and brandName!=''">
               and brand_name like #{brandName}
           </if>
       </where>
    </select>
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
         <where>
            <choose><!--相当于switch  -->
            <when test="status!=null">  <!--相当于case -->
                status = #{status}
            </when>
            <when test="companyName!=null and companyName!=''">  <!--相当于case -->
                company_name like #{companyName}
            </when>
            <when test="brandName!=null and brandName!=''">  <!--相当于case -->
                brand_name like #{brandName}
            </when>
            </choose>
        </where>


    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status) VALUES
        (#{brandName},#{companyName},#{ordered},#{description},#{status})
    </insert>
    <update id="updateAll">
        update tb_brand
        <set>
            <if test="brandName != null and brandName!=''">
                brand_name = #{brandName},
            </if><if test="companyName != null and companyName!=''">
                company_name = #{companyName},
            </if><if test="ordered != null and ordered!=''">
                ordered = #{ordered},
            </if><if test="description != null and description!=''">
                description = #{description},
            </if><if test="status != null and status!=''">
                 status = #{status}
            </if>
        </set>
        where
            id = #{id}
    </update>

    <delete id="deleteAll">
        delete from tb_brand
        where id =  #{id};
    </delete>
    <delete id="deleteByiIds">
        delete from tb_brand where id
        in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                 #{id}
            </foreach>

    </delete>
</mapper>